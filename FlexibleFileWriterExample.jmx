<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan demonstrates usage of Flexible File Writer</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.reporters.FlexibleFileWriter guiclass="kg.apc.jmeter.reporters.FlexibleFileWriterGui" testclass="kg.apc.jmeter.reporters.FlexibleFileWriter" testname="jp@gc - Flexible File Writer" enabled="true">
        <stringProp name="TestPlan.comments">Run the test and then look for file &apos;testResults.tsv&apos; at your disk.
It contains test results written in specified format.</stringProp>
        <stringProp name="filename">testResults.tsv</stringProp>
        <stringProp name="columns">endTime|\t|responseTime|\t|sentBytes|\t|receivedBytes|\t|responseCode|\r\n</stringProp>
        <boolProp name="overwrite">true</boolProp>
        <stringProp name="header">endTime	responseTime	sentBytes	receivedBytes	responseCode
</stringProp>
        <stringProp name="footer">-- end-of-file</stringProp>
      </kg.apc.jmeter.reporters.FlexibleFileWriter>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="TestPlan.comments">Thread group is set to generate 5000 samples</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">50</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <longProp name="ThreadGroup.start_time">1300542586000</longProp>
        <longProp name="ThreadGroup.end_time">1300542586000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <stringProp name="TestPlan.comments">Dummy Sampler set to use random Response Code</stringProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">${__Random(1,5)}0${__Random(0,3)}</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.

Random number:${__Random(1,1000)}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(1,10)}</stringProp>
          <boolProp name="WAITING">false</boolProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="LATENCY"></stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1307169466">[123][0-9][0-9]</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">This assertion marks 5xx and 4xx response codes as failed</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
